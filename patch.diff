diff --git a/README.md b/README.md
index 556b5d8..00be99f 100644
--- a/README.md
+++ b/README.md
@@ -1,17 +1,19 @@
-[![Review Assignment Due Date](https://classroom.github.com/assets/deadline-readme-button-24ddc0f5d75046c5622901739e7c5dd533143b0c8e959d652212380cedb1ea36.svg)](https://classroom.github.com/a/ERXV2f--)
 # Assignment 10: Simple MapReduce
 
 In this assignment, you will implement a simple version of
 [MapReduce](https://research.google/pubs/mapreduce-simplified-data-processing-on-large-clusters/).
 MapReduce is a programming framework for processing large data sets with a parallel, distributed
-algorithm on a cluster. It was inspired by the map and reduce functions commonly used in functional
-programming. The key components of the framework are two functions: `map` and `reduce`. The `map`
-function processes a key-value pair to generate a set of intermediate key-value pairs. The `reduce`
-function processes the intermediate key-value pairs to generate the final output. The framework is
-widely used in distributed computing, and it is the foundation of many big data processing systems,
-such as [Hadoop](https://hadoop.apache.org/) and [Spark](https://spark.apache.org/). In this
-assignment, you will implement a simple version of the MapReduce framework using threads and
-synchronization primitives.
+algorithm on a cluster. It was inspired by the
+[map](https://en.wikipedia.org/wiki/Map_(higher-order_function)) and
+[reduce](https://en.wikipedia.org/wiki/Fold_(higher-order_function)) functions commonly used in
+functional programming. The key components of the framework are those two functions: `map` and
+`reduce`. The `map` function processes a key-value pair to generate a set of intermediate key-value
+pairs. The `reduce` function processes the intermediate key-value pairs to generate the final
+output. The framework is widely used in distributed computing, and it is the foundation of many big
+data processing systems, such as [Hadoop](https://hadoop.apache.org/) and
+[Spark](https://spark.apache.org/). It is used in many courses as assignments due to its elegance
+and popularity. In this assignment, you will implement a simple version of the MapReduce framework
+using threads and synchronization primitives.
 
 We note that the description here largely comes from [the original MapReduce
 paper](https://research.google/pubs/mapreduce-simplified-data-processing-on-large-clusters/).
@@ -66,8 +68,8 @@ value is the number of occurrences of the word in the input:
 ("dog", "2")
 ```
 
-Another side note here is that using this output, we can use the word as a key to look up the number
-of occurrences of the word.
+Another side note here is that using this output, we can use the word as the key to look up the
+number of occurrences of the word.
 
 If a developer wants to use MapReduce to perform this kind of processing, they need to write two
 functions, `map` and `reduce`. The MapReduce framework takes those functions, runs them, and
@@ -227,15 +229,34 @@ There are several requirements for this assignment.
       the framework should call `map()` with the following two chunks: `("1", "the quick brown
       fox"), ("2", "jumps over the lazy dog")` and `("3", "the quick brown fox"), ("4", "jumps over
       the lazy dog")`, one for each thread.
-    * The output should be sorted by the key, according to the result of the `strcmp()` function.
-      For example, if the final output has the following key-value pairs: `("brown", "2")`, `("fox",
-      "2")`, and `("dog", "2")`, the framework should store the final output in the following order:
-      `("brown", "2")`, `("dog", "2")`, and `("fox", "2")`.
+    * The order of the intermediate key-value pairs should be sorted by the key, according to the
+      result of the `strcmp()` function. For example, if the intermediate key-value pairs have the
+      following key-value pairs: `("brown", "1")`, `("fox", "1")`, `("dog", "1")`, `("brown", "1")`,
+      and `("fox", "1")`, the framework should sort the intermediate key-value pairs in the
+      following order: `("brown", "1")`, `("brown", "1")`, `("dog", "1")`, `("fox", "1")`, and
+      `("fox", "1")`. The framework should then group them and divide them into chunks in the same
+      way as the input key-value pairs.
+    * Similarly, the order of the output key-value pairs should be sorted by the key, according to
+      the result of the `strcmp()` function. For example, if the final output has the following
+      key-value pairs: `("brown", "2")`, `("fox", "2")`, and `("dog", "2")`, the framework should
+      store the final output in the following order: `("brown", "2")`, `("dog", "2")`, and `("fox",
+      "2")`.
+    * When partitioning input or intermediate key-value pairs into chunks, the size of each chunk
+      should be the size of `(all key-value pairs) / (number of threads)`, except for the last
+      chunk, which should contain the remaining key-value pairs if there's any. For example, if we
+      have 7 key-value pairs and 3 threads, the first two chunks should contain 3 key-value pairs
+      each, and the last chunk should contain 1 key-value pairs. If we have 6 key-value pairs
+      instead, each chunk should contain 2 key-value pairs.
 * You need to use `pthread` to create threads. You should also use appropriate synchronization
   primitives to ensure that the threads work correctly.
 * You need to write `CMakeLists.txt` that produces a single executable named `mapreduce` that runs
   the test cases in [`main.c`](./src/main.c).
 * You may find [uthash](https://troydhanson.github.io/uthash/userguide.html) useful.
+* Similar to previous assignments, you should not hard-code or customize your implementation
+  tailored to our test cases. Generally, you should consider the provided test cases as examples or
+  specific instances of general cases. For example, we can change the constants, the input key-value
+  pairs, the `map` and `reduce` functions, the number of `map` and `reduce` threads, and so on. Your
+  implementation should still work correctly.
 
 ## Grading Distribution
 
@@ -251,7 +272,7 @@ There are several requirements for this assignment.
     * [15 pts] Correctly partition the intermediate key-value pairs into multiple chunks and assign
       each chunk to a `reduce` thread.
     * [15 pts] Correctly generate final output.
-* [5 pts] Correctly handle multiple calls to `mr_exec()`.
+* [5 pts] Pass all the above test cases.
 * [5 pts] `CMake` builds correctly.
 * Code that does not compile gets a 0.
 * You should not have any data races. We will test this with Clang's thread sanitizer. If a data
diff --git a/include/interface.h b/include/interface.h
index 0ff60e4..9c393b4 100644
--- a/include/interface.h
+++ b/include/interface.h
@@ -7,7 +7,7 @@
 
 // Used for input
 struct mr_input {
-  struct mr_in_kv *in_kvs; // input key-value pairs (array)
+  struct mr_in_kv *kv_lst; // input key-value pairs (array)
   size_t count;            // number of input key-value pairs
 };
 
@@ -26,8 +26,8 @@ struct mr_out_kv {
 
 // Used for final output
 struct mr_output {
-  struct mr_out_kv *out_kvs; // final output (array)
-  size_t count;              // number of final key-value pairs
+  struct mr_out_kv *kv_lst; // final output (array)
+  size_t count;             // number of final key-value pairs
 };
 
 // Executes the map-reduce framework
@@ -35,9 +35,9 @@ struct mr_output {
 // Returns 0 on success, -1 on failure
 int mr_exec(const struct mr_input *input,         // input key-value pairs
             void (*map)(const struct mr_in_kv *), // map function
-            size_t map_count,                     // number of mappers (threads)
+            size_t mapper_count,                  // number of mappers (threads)
             void (*reduce)(const struct mr_out_kv *), // reduce function
-            size_t reduce_count,     // number of reducers (threads)
+            size_t reducer_count,    // number of reducers (threads)
             struct mr_output *output // pointer to a final output buffer
 );
 
diff --git a/include/tests.h b/include/tests.h
index e084f65..002b330 100644
--- a/include/tests.h
+++ b/include/tests.h
@@ -4,19 +4,21 @@
 #include <stdbool.h>
 
 #define MAX_DATA_SIZE 1024
+#define MAX_THREADS 32
 
 #define TEST(cond, pts)                                                        \
   do {                                                                         \
     test(__FILE__, __LINE__, cond, pts);                                       \
   } while (0)
 
-void test(char *, int, bool, int);
-void single_map(void);
-void single_reduce(void);
-void single_map_reduce(void);
-void correct_number_of_maps(void);
-void correct_number_of_reduces(void);
-void partition_input(void);
-void partition_intermediate(void);
-void final_output(void);
-void multiple_calls(void);
+void test(char *, size_t, bool, size_t);
+bool single_map(void);
+bool single_reduce(void);
+bool single_map_reduce(void);
+bool number_of_mappers(void);
+bool number_of_reducers(void);
+bool partition_input(void);
+bool partition_intermediate(void);
+bool full_map_reduce(void);
+bool multiple_calls(void);
+void free_output(struct mr_output *);
diff --git a/src/free_output.c b/src/free_output.c
new file mode 100644
index 0000000..4bff0c7
--- /dev/null
+++ b/src/free_output.c
@@ -0,0 +1,19 @@
+#include "interface.h"
+#include "tests.h"
+#include <stdlib.h>
+
+void free_output(struct mr_output *output) {
+  if (output == NULL) {
+    return;
+  }
+
+  if (output->kv_lst == NULL) {
+    return;
+  }
+
+  for (size_t i = 0; i < output->count; i++) {
+    if (output->kv_lst[i].value != NULL)
+      free(output->kv_lst[i].value);
+  }
+  free(output->kv_lst);
+}
diff --git a/src/main.c b/src/main.c
index 8a7d293..919af9a 100644
--- a/src/main.c
+++ b/src/main.c
@@ -1,9 +1,9 @@
 #include "tests.h"
 
 int main(int argc, char *argv[]) {
-  single_map();
-  single_reduce();
-  single_map_reduce();
-
+  if (single_map() && single_reduce() && single_map_reduce() &&
+      number_of_mappers() && number_of_reducers() && partition_input() &&
+      partition_intermediate() && full_map_reduce())
+    TEST(true, 5);
   return 0;
 }
diff --git a/include/single_map_reduce.h b/src/map_and_reduce.c
similarity index 92%
rename from include/single_map_reduce.h
rename to src/map_and_reduce.c
index 3024802..a6f8fbe 100644
--- a/include/single_map_reduce.h
+++ b/src/map_and_reduce.c
@@ -1,9 +1,9 @@
-#pragma once
-
 #include "interface.h"
 #include "tests.h"
+#include <stdio.h>
+#include <string.h>
 
-struct mr_in_kv ex_in_kvs[MAX_DATA_SIZE] = {
+struct mr_in_kv ex_in_kv_lst[MAX_DATA_SIZE] = {
     {"0", "to"},       {"1", "be"},       {"2", "the"},      {"3", "also"},
     {"4", "have"},     {"5", "by"},       {"6", "not"},      {"7", "also"},
     {"8", "or"},       {"9", "have"},     {"10", "other"},   {"11", "in"},
@@ -266,7 +266,7 @@ struct ex_out {
   char value[MAX_VALUE_SIZE];
 };
 
-struct ex_out ex_out_kvs[57] = {
+struct ex_out ex_out_kv_lst[57] = {
     {"about", "25"}, {"all", "27"},   {"also", "26"},  {"an", "3"},
     {"and", "4"},    {"are", "3"},    {"as", "2"},     {"at", "8"},
     {"be", "4"},     {"been", "24"},  {"but", "22"},   {"by", "23"},
@@ -283,3 +283,64 @@ struct ex_out ex_out_kvs[57] = {
     {"which", "25"}, {"will", "23"},  {"with", "7"},   {"would", "22"},
     {"you", "26"},
 };
+
+void amr_map(const struct mr_in_kv *in_kv) { mr_emit_i(in_kv->value, "1"); }
+
+void amr_reduce(const struct mr_out_kv *inter_kv) {
+  size_t cnt = 0;
+
+  for (size_t i = 0; i < inter_kv->count; i++) {
+    strcmp(inter_kv->value[i], "1") == 0 ? cnt++ : 0;
+  }
+
+  char cnt_str[MAX_VALUE_SIZE];
+  snprintf(cnt_str, MAX_VALUE_SIZE, "%zu", cnt);
+  mr_emit_f(inter_kv->key, cnt_str);
+}
+
+int amr_cmp(struct mr_output *output) {
+  for (size_t i = 0; i < output->count; i++) {
+    if (strcmp(output->kv_lst[i].key, ex_out_kv_lst[i].key) != 0) {
+      return -1;
+    }
+
+    if (strcmp(output->kv_lst[i].value[0], ex_out_kv_lst[i].value) != 0) {
+      return -1;
+    }
+  }
+
+  return 0;
+}
+
+bool single_map_reduce() {
+  struct mr_input amr_input = {ex_in_kv_lst, MAX_DATA_SIZE};
+  struct mr_output amr_output;
+
+  bool res = mr_exec(&amr_input, amr_map, 1, amr_reduce, 1, &amr_output) == 0 &&
+             amr_output.count == 57 && amr_cmp(&amr_output) == 0;
+  free_output(&amr_output);
+  TEST(res, 15);
+
+  return res;
+}
+
+bool full_map_reduce() {
+  struct mr_input amr_input = {ex_in_kv_lst, MAX_DATA_SIZE};
+  struct mr_output amr_output;
+
+  bool res = true;
+  for (size_t i = 0; i < 5; i++) {
+    size_t m = 1 << (i + 1);
+
+    for (size_t j = 0; j < 5; j++) {
+      size_t r = 1 << (j + 1);
+      res = res &&
+            mr_exec(&amr_input, amr_map, m, amr_reduce, r, &amr_output) == 0 &&
+            amr_output.count == 57 && amr_cmp(&amr_output) == 0;
+      free_output(&amr_output);
+    }
+    TEST(res, 3);
+  }
+
+  return res;
+}
diff --git a/src/number_of_mappers_reducers.c b/src/number_of_mappers_reducers.c
new file mode 100644
index 0000000..ef26a9b
--- /dev/null
+++ b/src/number_of_mappers_reducers.c
@@ -0,0 +1,105 @@
+#include "interface.h"
+#include "tests.h"
+#include <pthread.h>
+#include <stdio.h>
+
+struct thread {
+  pthread_t id;
+  size_t count;
+};
+
+pthread_mutex_t nmr_lock = PTHREAD_MUTEX_INITIALIZER;
+
+bool too_many_threads = false;
+struct thread threads[MAX_THREADS] = {0};
+
+void nmr_reset() {
+  too_many_threads = false;
+  for (size_t i = 0; i < MAX_THREADS; i++) {
+    threads[i].count = 0;
+  }
+}
+
+int thread_cmp(size_t max) {
+  size_t count = 0;
+  for (size_t i = 0; i < MAX_THREADS; i++) {
+    if (threads[i].count > 0) {
+      count++;
+    }
+  }
+
+  if (count != max) {
+    return -1;
+  }
+  return 0;
+}
+
+void thread_count() {
+  pthread_t self = pthread_self();
+
+  pthread_mutex_lock(&nmr_lock);
+  size_t i = 0;
+  for (i = 0; i < MAX_THREADS; i++) {
+    if (threads[i].count == 0 || pthread_equal(threads[i].id, self)) {
+      threads[i].id = self;
+      threads[i].count++;
+      break;
+    }
+  }
+  if (i == MAX_THREADS) {
+    too_many_threads = true;
+  }
+  pthread_mutex_unlock(&nmr_lock);
+}
+
+bool run(void (*nomr_map)(const struct mr_in_kv *),
+         void (*nomr_reduce)(const struct mr_out_kv *), int type) {
+  struct mr_in_kv nomr_in_kvs[MAX_THREADS];
+
+  for (size_t i = 0; i < MAX_THREADS; i++) {
+    snprintf(nomr_in_kvs[i].key, MAX_KEY_SIZE, "%zu", i);
+    snprintf(nomr_in_kvs[i].value, MAX_VALUE_SIZE, "%zu", i);
+  }
+
+  struct mr_input nomr_input = {nomr_in_kvs, MAX_THREADS};
+  struct mr_output nomr_output;
+
+  size_t mappers = 1, reducers = 1;
+
+  bool res = true;
+
+  for (size_t i = 0; i < 5; i++) {
+    size_t n = 1 << (i + 1);
+
+    if (type == 0) {
+      mappers = n;
+    } else {
+      reducers = n;
+    }
+
+    nmr_reset();
+    bool f = mr_exec(&nomr_input, nomr_map, mappers, nomr_reduce, reducers,
+                     &nomr_output) == 0 &&
+             thread_cmp(mappers == 1 ? reducers : mappers) == 0 &&
+             !too_many_threads;
+    free_output(&nomr_output);
+    TEST(f, 1);
+    res = res && f;
+  }
+
+  return res;
+}
+
+void nom_map(const struct mr_in_kv *in_kv) { thread_count(); }
+
+void nom_reduce(const struct mr_out_kv *inter_kv) {}
+
+bool number_of_mappers(void) { return run(nom_map, nom_reduce, 0); }
+
+void nor_map(const struct mr_in_kv *in_kv) {
+  mr_emit_i(in_kv->key, in_kv->value);
+}
+
+void nor_reduce(const struct mr_out_kv *inter_kv) { thread_count(); }
+
+bool number_of_reducers(void) { return run(nor_map, nor_reduce, 1); }
diff --git a/src/partition.c b/src/partition.c
new file mode 100644
index 0000000..6cb4399
--- /dev/null
+++ b/src/partition.c
@@ -0,0 +1,168 @@
+#include "interface.h"
+#include "tests.h"
+#include <pthread.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+struct partition {
+  pthread_t id;
+  struct mr_in_kv kv_lst[MAX_DATA_SIZE];
+  size_t count;
+};
+
+bool too_many_partitions = false;
+
+struct partition partitions[MAX_THREADS];
+pthread_mutex_t p_lock = PTHREAD_MUTEX_INITIALIZER;
+
+void pin_map(const struct mr_in_kv *in_kv) {
+  pthread_t self = pthread_self();
+
+  pthread_mutex_lock(&p_lock);
+  size_t i = 0;
+  for (i = 0; i < MAX_THREADS; i++) {
+    if (partitions[i].count == 0 || pthread_equal(partitions[i].id, self)) {
+      partitions[i].id = self;
+      strncpy(partitions[i].kv_lst[partitions[i].count].key, in_kv->key,
+              MAX_KEY_SIZE);
+      strncpy(partitions[i].kv_lst[partitions[i].count].value, in_kv->value,
+              MAX_VALUE_SIZE);
+      partitions[i].count++;
+      break;
+    }
+  }
+  if (i == MAX_THREADS) {
+    too_many_partitions = true;
+  }
+  pthread_mutex_unlock(&p_lock);
+}
+
+void pin_reduce(const struct mr_out_kv *inter_kv) {}
+
+int partition_cmp(struct mr_in_kv *in_kv_lst, size_t num_par) {
+  size_t partition_size = MAX_DATA_SIZE / num_par;
+
+  for (size_t i = 0; i < num_par; i++) {
+    if (partitions[i].count != partition_size) {
+      return -1;
+    }
+  }
+
+  for (size_t i = 0; i < num_par; i++) {
+    size_t base = i * partition_size;
+    size_t pos = 0;
+    for (pos = 0; pos < num_par; pos++) {
+      if (strncmp(partitions[pos].kv_lst[0].key, in_kv_lst[base].key,
+                  MAX_KEY_SIZE) == 0)
+        break;
+    }
+    if (pos == num_par) {
+      return -1;
+    }
+
+    for (size_t j = 0; j < partition_size; j++) {
+      if (strncmp(partitions[pos].kv_lst[j].key, in_kv_lst[base + j].key,
+                  MAX_KEY_SIZE) != 0 ||
+          strncmp(partitions[pos].kv_lst[j].value, in_kv_lst[base + j].value,
+                  MAX_VALUE_SIZE) != 0) {
+
+        return -1;
+      }
+    }
+  }
+
+  return 0;
+}
+
+void partitions_reset() {
+  too_many_partitions = false;
+  for (size_t i = 0; i < MAX_THREADS; i++) {
+    partitions[i].count = 0;
+  }
+}
+
+bool partition_input(void) {
+  struct mr_in_kv pin_in_kv_lst[MAX_DATA_SIZE];
+
+  for (size_t i = 0; i < MAX_DATA_SIZE; i++) {
+    for (size_t j = 0; j < MAX_KEY_SIZE - 1; j++) {
+      pin_in_kv_lst[i].key[j] = ' ' + rand() % ('~' - ' ');
+    }
+    for (size_t j = 0; j < MAX_VALUE_SIZE - 1; j++) {
+      pin_in_kv_lst[i].value[j] = ' ' + rand() % ('~' - ' ');
+    }
+    pin_in_kv_lst[i].key[MAX_KEY_SIZE - 1] = '\0';
+    pin_in_kv_lst[i].value[MAX_VALUE_SIZE - 1] = '\0';
+  }
+
+  struct mr_input pin_input = {pin_in_kv_lst, MAX_DATA_SIZE};
+  struct mr_output pin_output;
+
+  bool res = true;
+  for (size_t i = 0; i < 5; i++) {
+    size_t n = 1 << (i + 1);
+
+    partitions_reset();
+    bool f = mr_exec(&pin_input, pin_map, n, pin_reduce, 1, &pin_output) == 0 &&
+             partition_cmp(pin_in_kv_lst, n) == 0 && !too_many_partitions;
+    free_output(&pin_output);
+    TEST(f, 3);
+    res = res && f;
+  }
+
+  return res;
+}
+
+void pinter_map(const struct mr_in_kv *in_kv) {
+  mr_emit_i(in_kv->key, in_kv->value);
+}
+
+void pinter_reduce(const struct mr_out_kv *inter_kv) {
+  pthread_t self = pthread_self();
+
+  pthread_mutex_lock(&p_lock);
+  size_t i = 0;
+  for (i = 0; i < MAX_THREADS; i++) {
+    if (partitions[i].count == 0 || pthread_equal(partitions[i].id, self)) {
+      partitions[i].id = self;
+      strncpy(partitions[i].kv_lst[partitions[i].count].key, inter_kv->key,
+              MAX_KEY_SIZE);
+      strncpy(partitions[i].kv_lst[partitions[i].count].value,
+              inter_kv->value[0], MAX_VALUE_SIZE);
+      partitions[i].count++;
+      break;
+    }
+  }
+  if (i == MAX_THREADS) {
+    too_many_partitions = true;
+  }
+  pthread_mutex_unlock(&p_lock);
+}
+
+bool partition_intermediate(void) {
+  struct mr_in_kv pinter_in_kv_lst[MAX_DATA_SIZE];
+
+  for (size_t i = 0; i < MAX_DATA_SIZE; i++) {
+    snprintf(pinter_in_kv_lst[i].key, MAX_KEY_SIZE, "%4zu", i);
+    snprintf(pinter_in_kv_lst[i].value, MAX_VALUE_SIZE, "%4zu", i);
+  }
+
+  struct mr_input pinter_input = {pinter_in_kv_lst, MAX_DATA_SIZE};
+  struct mr_output pinter_output;
+
+  bool res = true;
+  for (size_t i = 0; i < 5; i++) {
+    size_t r = 1 << (i + 1);
+
+    partitions_reset();
+    bool f = mr_exec(&pinter_input, pinter_map, 1, pinter_reduce, r,
+                     &pinter_output) == 0 &&
+             partition_cmp(pinter_in_kv_lst, r) == 0 && !too_many_partitions;
+    free_output(&pinter_output);
+    res = res && f;
+  }
+  TEST(res, 15);
+
+  return res;
+}
diff --git a/src/single_map.c b/src/single_map.c
index 5ba243c..19097b7 100644
--- a/src/single_map.c
+++ b/src/single_map.c
@@ -3,9 +3,9 @@
 #include <stdio.h>
 #include <string.h>
 
-struct mr_in_kv sm_in_kvs[MAX_DATA_SIZE];
+struct mr_in_kv sm_in_kv_lst[MAX_DATA_SIZE];
 
-struct mr_in_kv sm_kvs_store[MAX_DATA_SIZE];
+struct mr_in_kv sm_kv_store[MAX_DATA_SIZE];
 size_t sm_call_count = 0;
 
 void sm_map(const struct mr_in_kv *in_kv) {
@@ -15,16 +15,16 @@ void sm_map(const struct mr_in_kv *in_kv) {
     return;
   }
 
-  strncpy(sm_kvs_store[index].key, in_kv->key, MAX_KEY_SIZE);
-  strncpy(sm_kvs_store[index].value, in_kv->value, MAX_VALUE_SIZE);
+  strncpy(sm_kv_store[index].key, in_kv->key, MAX_KEY_SIZE);
+  strncpy(sm_kv_store[index].value, in_kv->value, MAX_VALUE_SIZE);
 }
 
 void sm_reduce(const struct mr_out_kv *inter_kv) {}
 
 int sm_cmp() {
-  for (int i = 0; i < MAX_DATA_SIZE; i++) {
-    if (strncmp(sm_kvs_store[i].key, sm_in_kvs[i].key, MAX_KEY_SIZE) != 0 ||
-        strncmp(sm_kvs_store[i].value, sm_in_kvs[i].value, MAX_VALUE_SIZE) !=
+  for (size_t i = 0; i < MAX_DATA_SIZE; i++) {
+    if (strncmp(sm_kv_store[i].key, sm_in_kv_lst[i].key, MAX_KEY_SIZE) != 0 ||
+        strncmp(sm_kv_store[i].value, sm_in_kv_lst[i].value, MAX_VALUE_SIZE) !=
             0) {
       return -1;
     }
@@ -32,18 +32,19 @@ int sm_cmp() {
   return 0;
 }
 
-void single_map() {
+bool single_map() {
   sm_call_count = 0;
-  for (int i = 0; i < MAX_DATA_SIZE; i++) {
-    snprintf(sm_in_kvs[i].key, MAX_KEY_SIZE, "%d", i);
-    snprintf(sm_in_kvs[i].value, MAX_VALUE_SIZE, "%d", i);
+  for (size_t i = 0; i < MAX_DATA_SIZE; i++) {
+    snprintf(sm_in_kv_lst[i].key, MAX_KEY_SIZE, "%zu", i);
+    snprintf(sm_in_kv_lst[i].value, MAX_VALUE_SIZE, "%zu", i);
   }
 
-  struct mr_input sm_input = {sm_in_kvs, MAX_DATA_SIZE};
+  struct mr_input sm_input = {sm_in_kv_lst, MAX_DATA_SIZE};
   struct mr_output sm_output;
 
-  TEST(mr_exec(&sm_input, sm_map, 1, sm_reduce, 1, &sm_output) == 0 &&
-           sm_call_count == MAX_DATA_SIZE && sm_cmp() == 0,
-       10);
-  sm_call_count = 0;
+  bool res = mr_exec(&sm_input, sm_map, 1, sm_reduce, 1, &sm_output) == 0 &&
+             sm_call_count == MAX_DATA_SIZE && sm_cmp() == 0;
+  free_output(&sm_output);
+  TEST(res, 10);
+  return res;
 }
diff --git a/src/single_map_reduce.c b/src/single_map_reduce.c
deleted file mode 100644
index fb52822..0000000
--- a/src/single_map_reduce.c
+++ /dev/null
@@ -1,40 +0,0 @@
-#include "single_map_reduce.h"
-#include <stdio.h>
-#include <string.h>
-
-void smr_map(const struct mr_in_kv *in_kv) { mr_emit_i(in_kv->value, "1"); }
-
-void smr_reduce(const struct mr_out_kv *inter_kv) {
-  int cnt = 0;
-
-  for (int i = 0; i < inter_kv->count; i++) {
-    strcmp(inter_kv->value[i], "1") == 0 ? cnt++ : 0;
-  }
-
-  char cnt_str[MAX_VALUE_SIZE];
-  snprintf(cnt_str, MAX_VALUE_SIZE, "%d", cnt);
-  mr_emit_f(inter_kv->key, cnt_str);
-}
-
-int smr_cmp(struct mr_output *output) {
-  for (int i = 0; i < output->count; i++) {
-    if (strcmp(output->out_kvs[i].key, ex_out_kvs[i].key) != 0) {
-      return -1;
-    }
-
-    if (strcmp(output->out_kvs[i].value[0], ex_out_kvs[i].value) != 0) {
-      return -1;
-    }
-  }
-
-  return 0;
-}
-
-void single_map_reduce() {
-  struct mr_input smr_input = {ex_in_kvs, MAX_DATA_SIZE};
-  struct mr_output smr_output;
-
-  TEST(mr_exec(&smr_input, smr_map, 1, smr_reduce, 1, &smr_output) == 0 &&
-           smr_output.count == 57 && smr_cmp(&smr_output) == 0,
-       15);
-}
diff --git a/src/single_reduce.c b/src/single_reduce.c
index 89603b9..71a02a5 100644
--- a/src/single_reduce.c
+++ b/src/single_reduce.c
@@ -5,14 +5,14 @@
 
 #define MOD 8
 
-struct mr_in_kv sr_in_kvs[MAX_DATA_SIZE];
+struct mr_in_kv sr_in_kv_lst[MAX_DATA_SIZE];
 
 size_t sr_call_count = 0;
 struct sr_inter_kv {
   char key[MAX_KEY_SIZE];
   char value[MAX_DATA_SIZE / MOD][MAX_VALUE_SIZE];
 };
-struct sr_inter_kv sr_kvs_store[MOD];
+struct sr_inter_kv sr_kv_store[MOD];
 
 void sr_map(const struct mr_in_kv *in_kv) {
   mr_emit_i(in_kv->key, in_kv->value);
@@ -25,20 +25,20 @@ void sr_reduce(const struct mr_out_kv *inter_kv) {
     return;
   }
 
-  strncpy(sr_kvs_store[index].key, inter_kv->key, MAX_KEY_SIZE);
-  for (int j = 0; j < inter_kv->count; j++) {
-    strncpy(sr_kvs_store[index].value[j], inter_kv->value[j], MAX_VALUE_SIZE);
+  strncpy(sr_kv_store[index].key, inter_kv->key, MAX_KEY_SIZE);
+  for (size_t i = 0; i < inter_kv->count; i++) {
+    strncpy(sr_kv_store[index].value[i], inter_kv->value[i], MAX_VALUE_SIZE);
   }
 }
 
 int sr_cmp() {
-  for (int i = 0; i < MAX_DATA_SIZE; i++) {
-    if (strncmp(sr_kvs_store[i % MOD].key, sr_in_kvs[i].key, MAX_KEY_SIZE) !=
+  for (size_t i = 0; i < MAX_DATA_SIZE; i++) {
+    if (strncmp(sr_kv_store[i % MOD].key, sr_in_kv_lst[i].key, MAX_KEY_SIZE) !=
         0) {
       return -1;
     }
 
-    if (strncmp(sr_kvs_store[i % MOD].value[i / MOD], sr_in_kvs[i].value,
+    if (strncmp(sr_kv_store[i % MOD].value[i / MOD], sr_in_kv_lst[i].value,
                 MAX_VALUE_SIZE) != 0) {
       return -1;
     }
@@ -46,19 +46,21 @@ int sr_cmp() {
   return 0;
 }
 
-void single_reduce() {
+bool single_reduce() {
   sr_call_count = 0;
 
-  for (int i = 0; i < MAX_DATA_SIZE; i++) {
-    snprintf(sr_in_kvs[i].key, MAX_KEY_SIZE, "%d", i % MOD);
-    snprintf(sr_in_kvs[i].value, MAX_VALUE_SIZE, "%d", i);
+  for (size_t i = 0; i < MAX_DATA_SIZE; i++) {
+    snprintf(sr_in_kv_lst[i].key, MAX_KEY_SIZE, "%zu", i % MOD);
+    snprintf(sr_in_kv_lst[i].value, MAX_VALUE_SIZE, "%zu", i);
   }
 
-  struct mr_input sr_input = {sr_in_kvs, MAX_DATA_SIZE};
+  struct mr_input sr_input = {sr_in_kv_lst, MAX_DATA_SIZE};
   struct mr_output sr_output;
 
-  TEST(mr_exec(&sr_input, sr_map, 1, sr_reduce, 1, &sr_output) == 0 &&
-           sr_call_count == MOD && sr_cmp() == 0,
-       10);
-  sr_call_count = 0;
+  bool res = mr_exec(&sr_input, sr_map, 1, sr_reduce, 1, &sr_output) == 0 &&
+             sr_call_count == MOD && sr_cmp() == 0;
+  free_output(&sr_output);
+  TEST(res, 10);
+
+  return res;
 }
diff --git a/src/test.c b/src/test.c
index b694523..1af5425 100644
--- a/src/test.c
+++ b/src/test.c
@@ -4,24 +4,24 @@
 #include <string.h>
 #include <unistd.h>
 
-static int SUCCESS_CASES = 0;
-static int TOTAL_CASES = 0;
-static int TOTAL_SCORE = 0;
+static size_t SUCCESS_CASES = 0;
+static size_t TOTAL_CASES = 0;
+static size_t TOTAL_SCORE = 0;
 
 void print_test_result() {
   char buf[48];
-  snprintf(buf, 48, "Score: %d, Success cases: %d/%d\n", TOTAL_SCORE,
+  snprintf(buf, 48, "Score: %zu, Success cases: %zu/%zu\n", TOTAL_SCORE,
            SUCCESS_CASES, TOTAL_CASES);
   write(STDOUT_FILENO, buf, strlen(buf));
 }
 
-void test(char *file, int line, bool f, int pts) {
+void test(char *file, size_t line, bool f, size_t pts) {
   if (f) {
     SUCCESS_CASES += 1;
     TOTAL_SCORE += pts;
   } else {
     char buf[128];
-    snprintf(buf, 128, "Test failed at line %d in %s\n", line, file);
+    snprintf(buf, 128, "Test failed at line %zu in %s\n", line, file);
     write(STDOUT_FILENO, buf, strlen(buf));
   }
   TOTAL_CASES += 1;

diff --git a/README.md b/README.md
index 556b5d8..00be99f 100644
--- a/README.md
+++ b/README.md
@@ -1,17 +1,19 @@
-[![Review Assignment Due Date](https://classroom.github.com/assets/deadline-readme-button-24ddc0f5d75046c5622901739e7c5dd533143b0c8e959d652212380cedb1ea36.svg)](https://classroom.github.com/a/ERXV2f--)
 # Assignment 10: Simple MapReduce
 
 In this assignment, you will implement a simple version of
 [MapReduce](https://research.google/pubs/mapreduce-simplified-data-processing-on-large-clusters/).
 MapReduce is a programming framework for processing large data sets with a parallel, distributed
-algorithm on a cluster. It was inspired by the map and reduce functions commonly used in functional
-programming. The key components of the framework are two functions: `map` and `reduce`. The `map`
-function processes a key-value pair to generate a set of intermediate key-value pairs. The `reduce`
-function processes the intermediate key-value pairs to generate the final output. The framework is
-widely used in distributed computing, and it is the foundation of many big data processing systems,
-such as [Hadoop](https://hadoop.apache.org/) and [Spark](https://spark.apache.org/). In this
-assignment, you will implement a simple version of the MapReduce framework using threads and
-synchronization primitives.
+algorithm on a cluster. It was inspired by the
+[map](https://en.wikipedia.org/wiki/Map_(higher-order_function)) and
+[reduce](https://en.wikipedia.org/wiki/Fold_(higher-order_function)) functions commonly used in
+functional programming. The key components of the framework are those two functions: `map` and
+`reduce`. The `map` function processes a key-value pair to generate a set of intermediate key-value
+pairs. The `reduce` function processes the intermediate key-value pairs to generate the final
+output. The framework is widely used in distributed computing, and it is the foundation of many big
+data processing systems, such as [Hadoop](https://hadoop.apache.org/) and
+[Spark](https://spark.apache.org/). It is used in many courses as assignments due to its elegance
+and popularity. In this assignment, you will implement a simple version of the MapReduce framework
+using threads and synchronization primitives.
 
 We note that the description here largely comes from [the original MapReduce
 paper](https://research.google/pubs/mapreduce-simplified-data-processing-on-large-clusters/).
@@ -66,8 +68,8 @@ value is the number of occurrences of the word in the input:
 ("dog", "2")
 ```
 
-Another side note here is that using this output, we can use the word as a key to look up the number
-of occurrences of the word.
+Another side note here is that using this output, we can use the word as the key to look up the
+number of occurrences of the word.
 
 If a developer wants to use MapReduce to perform this kind of processing, they need to write two
 functions, `map` and `reduce`. The MapReduce framework takes those functions, runs them, and
@@ -227,15 +229,34 @@ There are several requirements for this assignment.
       the framework should call `map()` with the following two chunks: `("1", "the quick brown
       fox"), ("2", "jumps over the lazy dog")` and `("3", "the quick brown fox"), ("4", "jumps over
       the lazy dog")`, one for each thread.
-    * The output should be sorted by the key, according to the result of the `strcmp()` function.
-      For example, if the final output has the following key-value pairs: `("brown", "2")`, `("fox",
-      "2")`, and `("dog", "2")`, the framework should store the final output in the following order:
-      `("brown", "2")`, `("dog", "2")`, and `("fox", "2")`.
+    * The order of the intermediate key-value pairs should be sorted by the key, according to the
+      result of the `strcmp()` function. For example, if the intermediate key-value pairs have the
+      following key-value pairs: `("brown", "1")`, `("fox", "1")`, `("dog", "1")`, `("brown", "1")`,
+      and `("fox", "1")`, the framework should sort the intermediate key-value pairs in the
+      following order: `("brown", "1")`, `("brown", "1")`, `("dog", "1")`, `("fox", "1")`, and
+      `("fox", "1")`. The framework should then group them and divide them into chunks in the same
+      way as the input key-value pairs.
+    * Similarly, the order of the output key-value pairs should be sorted by the key, according to
+      the result of the `strcmp()` function. For example, if the final output has the following
+      key-value pairs: `("brown", "2")`, `("fox", "2")`, and `("dog", "2")`, the framework should
+      store the final output in the following order: `("brown", "2")`, `("dog", "2")`, and `("fox",
+      "2")`.
+    * When partitioning input or intermediate key-value pairs into chunks, the size of each chunk
+      should be the size of `(all key-value pairs) / (number of threads)`, except for the last
+      chunk, which should contain the remaining key-value pairs if there's any. For example, if we
+      have 7 key-value pairs and 3 threads, the first two chunks should contain 3 key-value pairs
+      each, and the last chunk should contain 1 key-value pairs. If we have 6 key-value pairs
+      instead, each chunk should contain 2 key-value pairs.
 * You need to use `pthread` to create threads. You should also use appropriate synchronization
   primitives to ensure that the threads work correctly.
 * You need to write `CMakeLists.txt` that produces a single executable named `mapreduce` that runs
   the test cases in [`main.c`](./src/main.c).
 * You may find [uthash](https://troydhanson.github.io/uthash/userguide.html) useful.
+* Similar to previous assignments, you should not hard-code or customize your implementation
+  tailored to our test cases. Generally, you should consider the provided test cases as examples or
+  specific instances of general cases. For example, we can change the constants, the input key-value
+  pairs, the `map` and `reduce` functions, the number of `map` and `reduce` threads, and so on. Your
+  implementation should still work correctly.
 
 ## Grading Distribution
 
@@ -251,7 +272,7 @@ There are several requirements for this assignment.
     * [15 pts] Correctly partition the intermediate key-value pairs into multiple chunks and assign
       each chunk to a `reduce` thread.
     * [15 pts] Correctly generate final output.
-* [5 pts] Correctly handle multiple calls to `mr_exec()`.
+* [5 pts] Pass all the above test cases.
 * [5 pts] `CMake` builds correctly.
 * Code that does not compile gets a 0.
 * You should not have any data races. We will test this with Clang's thread sanitizer. If a data
diff --git a/include/interface.h b/include/interface.h
index 0ff60e4..9c393b4 100644
--- a/include/interface.h
+++ b/include/interface.h
@@ -7,7 +7,7 @@
 
 // Used for input
 struct mr_input {
-  struct mr_in_kv *in_kvs; // input key-value pairs (array)
+  struct mr_in_kv *kv_lst; // input key-value pairs (array)
   size_t count;            // number of input key-value pairs
 };
 
@@ -26,8 +26,8 @@ struct mr_out_kv {
 
 // Used for final output
 struct mr_output {
-  struct mr_out_kv *out_kvs; // final output (array)
-  size_t count;              // number of final key-value pairs
+  struct mr_out_kv *kv_lst; // final output (array)
+  size_t count;             // number of final key-value pairs
 };
 
 // Executes the map-reduce framework
@@ -35,9 +35,9 @@ struct mr_output {
 // Returns 0 on success, -1 on failure
 int mr_exec(const struct mr_input *input,         // input key-value pairs
             void (*map)(const struct mr_in_kv *), // map function
-            size_t map_count,                     // number of mappers (threads)
+            size_t mapper_count,                  // number of mappers (threads)
             void (*reduce)(const struct mr_out_kv *), // reduce function
-            size_t reduce_count,     // number of reducers (threads)
+            size_t reducer_count,    // number of reducers (threads)
             struct mr_output *output // pointer to a final output buffer
 );
 
diff --git a/include/single_map_reduce.h b/include/single_map_reduce.h
deleted file mode 100644
index 3024802..0000000
--- a/include/single_map_reduce.h
+++ /dev/null
@@ -1,285 +0,0 @@
-#pragma once
-
-#include "interface.h"
-#include "tests.h"
-
-struct mr_in_kv ex_in_kvs[MAX_DATA_SIZE] = {
-    {"0", "to"},       {"1", "be"},       {"2", "the"},      {"3", "also"},
-    {"4", "have"},     {"5", "by"},       {"6", "not"},      {"7", "also"},
-    {"8", "or"},       {"9", "have"},     {"10", "other"},   {"11", "in"},
-    {"12", "with"},    {"13", "how"},     {"14", "have"},    {"15", "that"},
-    {"16", "be"},      {"17", "do"},      {"18", "all"},     {"19", "like"},
-    {"20", "for"},     {"21", "there"},   {"22", "and"},     {"23", "if"},
-    {"24", "do"},      {"25", "no"},      {"26", "which"},   {"27", "more"},
-    {"28", "some"},    {"29", "their"},   {"30", "the"},     {"31", "from"},
-    {"32", "for"},     {"33", "will"},    {"34", "or"},      {"35", "they"},
-    {"36", "on"},      {"37", "to"},      {"38", "there"},   {"39", "this"},
-    {"40", "to"},      {"41", "no"},      {"42", "also"},    {"43", "one"},
-    {"44", "some"},    {"45", "with"},    {"46", "other"},   {"47", "what"},
-    {"48", "on"},      {"49", "to"},      {"50", "for"},     {"51", "in"},
-    {"52", "and"},     {"53", "you"},     {"54", "been"},    {"55", "more"},
-    {"56", "have"},    {"57", "more"},    {"58", "one"},     {"59", "all"},
-    {"60", "what"},    {"61", "her"},     {"62", "like"},    {"63", "like"},
-    {"64", "this"},    {"65", "not"},     {"66", "her"},     {"67", "do"},
-    {"68", "from"},    {"69", "with"},    {"70", "have"},    {"71", "at"},
-    {"72", "it"},      {"73", "her"},     {"74", "was"},     {"75", "more"},
-    {"76", "in"},      {"77", "more"},    {"78", "their"},   {"79", "the"},
-    {"80", "do"},      {"81", "on"},      {"82", "be"},      {"83", "that"},
-    {"84", "with"},    {"85", "of"},      {"86", "there"},   {"87", "their"},
-    {"88", "not"},     {"89", "we"},      {"90", "from"},    {"91", "like"},
-    {"92", "which"},   {"93", "by"},      {"94", "time"},    {"95", "have"},
-    {"96", "at"},      {"97", "so"},      {"98", "so"},      {"99", "that"},
-    {"100", "other"},  {"101", "that"},   {"102", "this"},   {"103", "would"},
-    {"104", "was"},    {"105", "been"},   {"106", "you"},    {"107", "at"},
-    {"108", "which"},  {"109", "all"},    {"110", "have"},   {"111", "are"},
-    {"112", "can"},    {"113", "more"},   {"114", "if"},     {"115", "there"},
-    {"116", "one"},    {"117", "what"},   {"118", "about"},  {"119", "when"},
-    {"120", "out"},    {"121", "also"},   {"122", "some"},   {"123", "her"},
-    {"124", "up"},     {"125", "other"},  {"126", "do"},     {"127", "time"},
-    {"128", "how"},    {"129", "has"},    {"130", "like"},   {"131", "no"},
-    {"132", "then"},   {"133", "its"},    {"134", "would"},  {"135", "them"},
-    {"136", "so"},     {"137", "more"},   {"138", "from"},   {"139", "by"},
-    {"140", "but"},    {"141", "not"},    {"142", "their"},  {"143", "all"},
-    {"144", "you"},    {"145", "we"},     {"146", "can"},    {"147", "has"},
-    {"148", "will"},   {"149", "which"},  {"150", "more"},   {"151", "if"},
-    {"152", "there"},  {"153", "one"},    {"154", "what"},   {"155", "about"},
-    {"156", "when"},   {"157", "out"},    {"158", "also"},   {"159", "some"},
-    {"160", "her"},    {"161", "up"},     {"162", "other"},  {"163", "do"},
-    {"164", "time"},   {"165", "how"},    {"166", "has"},    {"167", "been"},
-    {"168", "like"},   {"169", "no"},     {"170", "then"},   {"171", "its"},
-    {"172", "would"},  {"173", "them"},   {"174", "so"},     {"175", "more"},
-    {"176", "from"},   {"177", "by"},     {"178", "but"},    {"179", "not"},
-    {"180", "their"},  {"181", "all"},    {"182", "you"},    {"183", "we"},
-    {"184", "can"},    {"185", "has"},    {"186", "will"},   {"187", "which"},
-    {"188", "more"},   {"189", "if"},     {"190", "there"},  {"191", "one"},
-    {"192", "what"},   {"193", "about"},  {"194", "when"},   {"195", "out"},
-    {"196", "also"},   {"197", "some"},   {"198", "her"},    {"199", "up"},
-    {"200", "other"},  {"201", "as"},     {"202", "or"},     {"203", "with"},
-    {"204", "some"},   {"205", "from"},   {"206", "more"},   {"207", "some"},
-    {"208", "can"},    {"209", "we"},     {"210", "there"},  {"211", "are"},
-    {"212", "was"},    {"213", "they"},   {"214", "from"},   {"215", "or"},
-    {"216", "an"},     {"217", "have"},   {"218", "at"},     {"219", "but"},
-    {"220", "not"},    {"221", "their"},  {"222", "all"},    {"223", "you"},
-    {"224", "we"},     {"225", "can"},    {"226", "has"},    {"227", "will"},
-    {"228", "which"},  {"229", "more"},   {"230", "if"},     {"231", "there"},
-    {"232", "one"},    {"233", "what"},   {"234", "about"},  {"235", "when"},
-    {"236", "out"},    {"237", "also"},   {"238", "some"},   {"239", "her"},
-    {"240", "up"},     {"241", "other"},  {"242", "do"},     {"243", "time"},
-    {"244", "how"},    {"245", "has"},    {"246", "been"},   {"247", "like"},
-    {"248", "no"},     {"249", "then"},   {"250", "its"},    {"251", "would"},
-    {"252", "them"},   {"253", "so"},     {"254", "more"},   {"255", "from"},
-    {"256", "by"},     {"257", "but"},    {"258", "not"},    {"259", "their"},
-    {"260", "all"},    {"261", "you"},    {"262", "we"},     {"263", "can"},
-    {"264", "has"},    {"265", "will"},   {"266", "which"},  {"267", "more"},
-    {"268", "if"},     {"269", "there"},  {"270", "one"},    {"271", "what"},
-    {"272", "about"},  {"273", "when"},   {"274", "out"},    {"275", "also"},
-    {"276", "some"},   {"277", "her"},    {"278", "up"},     {"279", "other"},
-    {"280", "do"},     {"281", "time"},   {"282", "how"},    {"283", "has"},
-    {"284", "been"},   {"285", "like"},   {"286", "no"},     {"287", "then"},
-    {"288", "its"},    {"289", "would"},  {"290", "them"},   {"291", "so"},
-    {"292", "more"},   {"293", "from"},   {"294", "by"},     {"295", "but"},
-    {"296", "not"},    {"297", "their"},  {"298", "all"},    {"299", "you"},
-    {"300", "we"},     {"301", "when"},   {"302", "its"},    {"303", "and"},
-    {"304", "is"},     {"305", "is"},     {"306", "more"},   {"307", "an"},
-    {"308", "other"},  {"309", "to"},     {"310", "what"},   {"311", "about"},
-    {"312", "when"},   {"313", "out"},    {"314", "also"},   {"315", "some"},
-    {"316", "her"},    {"317", "up"},     {"318", "other"},  {"319", "do"},
-    {"320", "time"},   {"321", "how"},    {"322", "has"},    {"323", "been"},
-    {"324", "like"},   {"325", "no"},     {"326", "then"},   {"327", "its"},
-    {"328", "would"},  {"329", "them"},   {"330", "so"},     {"331", "more"},
-    {"332", "from"},   {"333", "by"},     {"334", "but"},    {"335", "not"},
-    {"336", "their"},  {"337", "all"},    {"338", "you"},    {"339", "we"},
-    {"340", "can"},    {"341", "has"},    {"342", "will"},   {"343", "which"},
-    {"344", "more"},   {"345", "if"},     {"346", "there"},  {"347", "one"},
-    {"348", "what"},   {"349", "about"},  {"350", "when"},   {"351", "out"},
-    {"352", "also"},   {"353", "some"},   {"354", "her"},    {"355", "up"},
-    {"356", "other"},  {"357", "do"},     {"358", "time"},   {"359", "how"},
-    {"360", "has"},    {"361", "been"},   {"362", "like"},   {"363", "no"},
-    {"364", "then"},   {"365", "its"},    {"366", "would"},  {"367", "them"},
-    {"368", "so"},     {"369", "more"},   {"370", "from"},   {"371", "by"},
-    {"372", "but"},    {"373", "not"},    {"374", "their"},  {"375", "all"},
-    {"376", "you"},    {"377", "we"},     {"378", "can"},    {"379", "has"},
-    {"380", "will"},   {"381", "which"},  {"382", "more"},   {"383", "if"},
-    {"384", "there"},  {"385", "one"},    {"386", "what"},   {"387", "about"},
-    {"388", "when"},   {"389", "out"},    {"390", "also"},   {"391", "some"},
-    {"392", "her"},    {"393", "up"},     {"394", "other"},  {"395", "do"},
-    {"396", "time"},   {"397", "how"},    {"398", "has"},    {"399", "been"},
-    {"400", "like"},   {"401", "there"},  {"402", "is"},     {"403", "them"},
-    {"404", "other"},  {"405", "that"},   {"406", "so"},     {"407", "them"},
-    {"408", "then"},   {"409", "about"},  {"410", "like"},   {"411", "no"},
-    {"412", "its"},    {"413", "would"},  {"414", "them"},   {"415", "so"},
-    {"416", "more"},   {"417", "from"},   {"418", "by"},     {"419", "but"},
-    {"420", "not"},    {"421", "their"},  {"422", "all"},    {"423", "you"},
-    {"424", "we"},     {"425", "can"},    {"426", "has"},    {"427", "will"},
-    {"428", "which"},  {"429", "more"},   {"430", "if"},     {"431", "there"},
-    {"432", "one"},    {"433", "what"},   {"434", "about"},  {"435", "when"},
-    {"436", "out"},    {"437", "also"},   {"438", "some"},   {"439", "her"},
-    {"440", "up"},     {"441", "other"},  {"442", "do"},     {"443", "time"},
-    {"444", "how"},    {"445", "has"},    {"446", "been"},   {"447", "like"},
-    {"448", "no"},     {"449", "then"},   {"450", "its"},    {"451", "would"},
-    {"452", "them"},   {"453", "so"},     {"454", "more"},   {"455", "from"},
-    {"456", "by"},     {"457", "but"},    {"458", "not"},    {"459", "their"},
-    {"460", "all"},    {"461", "you"},    {"462", "we"},     {"463", "can"},
-    {"464", "has"},    {"465", "will"},   {"466", "which"},  {"467", "more"},
-    {"468", "if"},     {"469", "there"},  {"470", "one"},    {"471", "what"},
-    {"472", "about"},  {"473", "when"},   {"474", "out"},    {"475", "also"},
-    {"476", "some"},   {"477", "her"},    {"478", "up"},     {"479", "other"},
-    {"480", "do"},     {"481", "time"},   {"482", "how"},    {"483", "has"},
-    {"484", "been"},   {"485", "like"},   {"486", "no"},     {"487", "then"},
-    {"488", "its"},    {"489", "would"},  {"490", "them"},   {"491", "so"},
-    {"492", "more"},   {"493", "from"},   {"494", "by"},     {"495", "but"},
-    {"496", "not"},    {"497", "their"},  {"498", "all"},    {"499", "you"},
-    {"500", "we"},     {"501", "or"},     {"502", "more"},   {"503", "the"},
-    {"504", "up"},     {"505", "to"},     {"506", "we"},     {"507", "one"},
-    {"508", "that"},   {"509", "be"},     {"510", "was"},    {"511", "been"},
-    {"512", "you"},    {"513", "at"},     {"514", "which"},  {"515", "all"},
-    {"516", "have"},   {"517", "are"},    {"518", "can"},    {"519", "more"},
-    {"520", "if"},     {"521", "there"},  {"522", "one"},    {"523", "what"},
-    {"524", "about"},  {"525", "when"},   {"526", "out"},    {"527", "also"},
-    {"528", "some"},   {"529", "her"},    {"530", "up"},     {"531", "other"},
-    {"532", "do"},     {"533", "time"},   {"534", "how"},    {"535", "has"},
-    {"536", "been"},   {"537", "like"},   {"538", "no"},     {"539", "then"},
-    {"540", "its"},    {"541", "would"},  {"542", "them"},   {"543", "so"},
-    {"544", "more"},   {"545", "from"},   {"546", "by"},     {"547", "but"},
-    {"548", "not"},    {"549", "their"},  {"550", "all"},    {"551", "you"},
-    {"552", "we"},     {"553", "can"},    {"554", "has"},    {"555", "will"},
-    {"556", "which"},  {"557", "more"},   {"558", "if"},     {"559", "there"},
-    {"560", "one"},    {"561", "what"},   {"562", "about"},  {"563", "when"},
-    {"564", "out"},    {"565", "also"},   {"566", "some"},   {"567", "her"},
-    {"568", "up"},     {"569", "other"},  {"570", "do"},     {"571", "time"},
-    {"572", "how"},    {"573", "has"},    {"574", "been"},   {"575", "like"},
-    {"576", "no"},     {"577", "then"},   {"578", "its"},    {"579", "would"},
-    {"580", "them"},   {"581", "so"},     {"582", "more"},   {"583", "from"},
-    {"584", "by"},     {"585", "but"},    {"586", "not"},    {"587", "their"},
-    {"588", "all"},    {"589", "you"},    {"590", "we"},     {"591", "can"},
-    {"592", "has"},    {"593", "will"},   {"594", "which"},  {"595", "more"},
-    {"596", "if"},     {"597", "there"},  {"598", "one"},    {"599", "what"},
-    {"600", "about"},  {"601", "it"},     {"602", "out"},    {"603", "will"},
-    {"604", "they"},   {"605", "of"},     {"606", "other"},  {"607", "and"},
-    {"608", "also"},   {"609", "more"},   {"610", "their"},  {"611", "all"},
-    {"612", "you"},    {"613", "we"},     {"614", "can"},    {"615", "has"},
-    {"616", "will"},   {"617", "which"},  {"618", "more"},   {"619", "if"},
-    {"620", "there"},  {"621", "one"},    {"622", "what"},   {"623", "about"},
-    {"624", "when"},   {"625", "out"},    {"626", "also"},   {"627", "some"},
-    {"628", "her"},    {"629", "up"},     {"630", "other"},  {"631", "do"},
-    {"632", "time"},   {"633", "how"},    {"634", "has"},    {"635", "been"},
-    {"636", "like"},   {"637", "no"},     {"638", "then"},   {"639", "its"},
-    {"640", "would"},  {"641", "them"},   {"642", "so"},     {"643", "more"},
-    {"644", "from"},   {"645", "by"},     {"646", "but"},    {"647", "not"},
-    {"648", "their"},  {"649", "all"},    {"650", "you"},    {"651", "we"},
-    {"652", "can"},    {"653", "has"},    {"654", "will"},   {"655", "which"},
-    {"656", "more"},   {"657", "if"},     {"658", "there"},  {"659", "one"},
-    {"660", "what"},   {"661", "about"},  {"662", "when"},   {"663", "out"},
-    {"664", "also"},   {"665", "some"},   {"666", "her"},    {"667", "up"},
-    {"668", "other"},  {"669", "do"},     {"670", "time"},   {"671", "how"},
-    {"672", "has"},    {"673", "been"},   {"674", "like"},   {"675", "no"},
-    {"676", "then"},   {"677", "its"},    {"678", "would"},  {"679", "them"},
-    {"680", "so"},     {"681", "more"},   {"682", "from"},   {"683", "by"},
-    {"684", "but"},    {"685", "not"},    {"686", "their"},  {"687", "all"},
-    {"688", "you"},    {"689", "we"},     {"690", "can"},    {"691", "has"},
-    {"692", "will"},   {"693", "which"},  {"694", "more"},   {"695", "if"},
-    {"696", "there"},  {"697", "one"},    {"698", "what"},   {"699", "about"},
-    {"700", "when"},   {"701", "we"},     {"702", "up"},     {"703", "at"},
-    {"704", "its"},    {"705", "time"},   {"706", "it"},     {"707", "they"},
-    {"708", "in"},     {"709", "with"},   {"710", "when"},   {"711", "out"},
-    {"712", "also"},   {"713", "some"},   {"714", "her"},    {"715", "up"},
-    {"716", "other"},  {"717", "do"},     {"718", "time"},   {"719", "how"},
-    {"720", "has"},    {"721", "been"},   {"722", "like"},   {"723", "no"},
-    {"724", "then"},   {"725", "its"},    {"726", "would"},  {"727", "them"},
-    {"728", "so"},     {"729", "more"},   {"730", "from"},   {"731", "by"},
-    {"732", "but"},    {"733", "not"},    {"734", "their"},  {"735", "all"},
-    {"736", "you"},    {"737", "we"},     {"738", "can"},    {"739", "has"},
-    {"740", "will"},   {"741", "which"},  {"742", "more"},   {"743", "if"},
-    {"744", "there"},  {"745", "one"},    {"746", "what"},   {"747", "about"},
-    {"748", "when"},   {"749", "out"},    {"750", "also"},   {"751", "some"},
-    {"752", "her"},    {"753", "up"},     {"754", "other"},  {"755", "do"},
-    {"756", "time"},   {"757", "how"},    {"758", "has"},    {"759", "been"},
-    {"760", "like"},   {"761", "no"},     {"762", "then"},   {"763", "its"},
-    {"764", "would"},  {"765", "them"},   {"766", "so"},     {"767", "more"},
-    {"768", "from"},   {"769", "by"},     {"770", "but"},    {"771", "not"},
-    {"772", "their"},  {"773", "all"},    {"774", "you"},    {"775", "we"},
-    {"776", "can"},    {"777", "has"},    {"778", "will"},   {"779", "which"},
-    {"780", "more"},   {"781", "if"},     {"782", "there"},  {"783", "one"},
-    {"784", "what"},   {"785", "about"},  {"786", "when"},   {"787", "out"},
-    {"788", "also"},   {"789", "some"},   {"790", "her"},    {"791", "up"},
-    {"792", "other"},  {"793", "do"},     {"794", "time"},   {"795", "how"},
-    {"796", "has"},    {"797", "been"},   {"798", "like"},   {"799", "no"},
-    {"800", "then"},   {"801", "with"},   {"802", "her"},    {"803", "at"},
-    {"804", "would"},  {"805", "by"},     {"806", "about"},  {"807", "been"},
-    {"808", "then"},   {"809", "we"},     {"810", "an"},     {"811", "have"},
-    {"812", "at"},     {"813", "but"},    {"814", "not"},    {"815", "their"},
-    {"816", "all"},    {"817", "you"},    {"818", "we"},     {"819", "can"},
-    {"820", "has"},    {"821", "will"},   {"822", "which"},  {"823", "more"},
-    {"824", "if"},     {"825", "there"},  {"826", "one"},    {"827", "what"},
-    {"828", "about"},  {"829", "when"},   {"830", "out"},    {"831", "also"},
-    {"832", "some"},   {"833", "her"},    {"834", "up"},     {"835", "other"},
-    {"836", "do"},     {"837", "time"},   {"838", "how"},    {"839", "has"},
-    {"840", "been"},   {"841", "like"},   {"842", "no"},     {"843", "then"},
-    {"844", "its"},    {"845", "would"},  {"846", "them"},   {"847", "so"},
-    {"848", "more"},   {"849", "from"},   {"850", "by"},     {"851", "but"},
-    {"852", "not"},    {"853", "their"},  {"854", "all"},    {"855", "you"},
-    {"856", "we"},     {"857", "can"},    {"858", "has"},    {"859", "will"},
-    {"860", "which"},  {"861", "more"},   {"862", "if"},     {"863", "there"},
-    {"864", "one"},    {"865", "what"},   {"866", "about"},  {"867", "when"},
-    {"868", "out"},    {"869", "also"},   {"870", "some"},   {"871", "her"},
-    {"872", "up"},     {"873", "other"},  {"874", "do"},     {"875", "time"},
-    {"876", "how"},    {"877", "has"},    {"878", "been"},   {"879", "like"},
-    {"880", "no"},     {"881", "then"},   {"882", "its"},    {"883", "would"},
-    {"884", "them"},   {"885", "so"},     {"886", "more"},   {"887", "from"},
-    {"888", "by"},     {"889", "but"},    {"890", "not"},    {"891", "their"},
-    {"892", "all"},    {"893", "you"},    {"894", "we"},     {"895", "can"},
-    {"896", "has"},    {"897", "will"},   {"898", "which"},  {"899", "more"},
-    {"900", "if"},     {"901", "there"},  {"902", "it"},     {"903", "its"},
-    {"904", "as"},     {"905", "that"},   {"906", "its"},    {"907", "has"},
-    {"908", "like"},   {"909", "how"},    {"910", "when"},   {"911", "out"},
-    {"912", "also"},   {"913", "some"},   {"914", "her"},    {"915", "up"},
-    {"916", "other"},  {"917", "do"},     {"918", "time"},   {"919", "how"},
-    {"920", "has"},    {"921", "been"},   {"922", "like"},   {"923", "no"},
-    {"924", "then"},   {"925", "its"},    {"926", "would"},  {"927", "them"},
-    {"928", "so"},     {"929", "more"},   {"930", "from"},   {"931", "by"},
-    {"932", "but"},    {"933", "not"},    {"934", "their"},  {"935", "all"},
-    {"936", "you"},    {"937", "we"},     {"938", "can"},    {"939", "has"},
-    {"940", "will"},   {"941", "which"},  {"942", "more"},   {"943", "if"},
-    {"944", "there"},  {"945", "one"},    {"946", "what"},   {"947", "about"},
-    {"948", "when"},   {"949", "out"},    {"950", "also"},   {"951", "some"},
-    {"952", "her"},    {"953", "up"},     {"954", "other"},  {"955", "do"},
-    {"956", "time"},   {"957", "how"},    {"958", "has"},    {"959", "been"},
-    {"960", "like"},   {"961", "no"},     {"962", "then"},   {"963", "its"},
-    {"964", "would"},  {"965", "them"},   {"966", "so"},     {"967", "more"},
-    {"968", "from"},   {"969", "by"},     {"970", "but"},    {"971", "not"},
-    {"972", "their"},  {"973", "all"},    {"974", "you"},    {"975", "we"},
-    {"976", "can"},    {"977", "has"},    {"978", "will"},   {"979", "which"},
-    {"980", "more"},   {"981", "if"},     {"982", "there"},  {"983", "one"},
-    {"984", "what"},   {"985", "about"},  {"986", "when"},   {"987", "out"},
-    {"988", "also"},   {"989", "some"},   {"990", "her"},    {"991", "up"},
-    {"992", "other"},  {"993", "do"},     {"994", "time"},   {"995", "how"},
-    {"996", "has"},    {"997", "been"},   {"998", "like"},   {"999", "no"},
-    {"1000", "then"},  {"1001", "its"},   {"1002", "would"}, {"1003", "them"},
-    {"1004", "so"},    {"1005", "more"},  {"1006", "from"},  {"1007", "by"},
-    {"1008", "but"},   {"1009", "not"},   {"1010", "their"}, {"1011", "all"},
-    {"1012", "you"},   {"1013", "we"},    {"1014", "can"},   {"1015", "has"},
-    {"1016", "will"},  {"1017", "which"}, {"1018", "more"},  {"1019", "if"},
-    {"1020", "there"}, {"1021", "one"},   {"1022", "what"},  {"1023", "about"}};
-
-struct ex_out {
-  char key[MAX_KEY_SIZE];
-  char value[MAX_VALUE_SIZE];
-};
-
-struct ex_out ex_out_kvs[57] = {
-    {"about", "25"}, {"all", "27"},   {"also", "26"},  {"an", "3"},
-    {"and", "4"},    {"are", "3"},    {"as", "2"},     {"at", "8"},
-    {"be", "4"},     {"been", "24"},  {"but", "22"},   {"by", "23"},
-    {"can", "24"},   {"do", "25"},    {"for", "3"},    {"from", "25"},
-    {"has", "43"},   {"have", "10"},  {"her", "26"},   {"how", "23"},
-    {"if", "24"},    {"in", "4"},     {"is", "3"},     {"it", "4"},
-    {"its", "24"},   {"like", "27"},  {"more", "52"},  {"no", "23"},
-    {"not", "25"},   {"of", "2"},     {"on", "3"},     {"one", "25"},
-    {"or", "5"},     {"other", "28"}, {"out", "23"},   {"so", "23"},
-    {"some", "26"},  {"that", "7"},   {"the", "4"},    {"their", "26"},
-    {"them", "22"},  {"then", "22"},  {"there", "28"}, {"they", "4"},
-    {"this", "3"},   {"time", "23"},  {"to", "6"},     {"up", "24"},
-    {"was", "4"},    {"we", "28"},    {"what", "25"},  {"when", "24"},
-    {"which", "25"}, {"will", "23"},  {"with", "7"},   {"would", "22"},
-    {"you", "26"},
-};
diff --git a/include/tests.h b/include/tests.h
index e084f65..002b330 100644
--- a/include/tests.h
+++ b/include/tests.h
@@ -4,19 +4,21 @@
 #include <stdbool.h>
 
 #define MAX_DATA_SIZE 1024
+#define MAX_THREADS 32
 
 #define TEST(cond, pts)                                                        \
   do {                                                                         \
     test(__FILE__, __LINE__, cond, pts);                                       \
   } while (0)
 
-void test(char *, int, bool, int);
-void single_map(void);
-void single_reduce(void);
-void single_map_reduce(void);
-void correct_number_of_maps(void);
-void correct_number_of_reduces(void);
-void partition_input(void);
-void partition_intermediate(void);
-void final_output(void);
-void multiple_calls(void);
+void test(char *, size_t, bool, size_t);
+bool single_map(void);
+bool single_reduce(void);
+bool single_map_reduce(void);
+bool number_of_mappers(void);
+bool number_of_reducers(void);
+bool partition_input(void);
+bool partition_intermediate(void);
+bool full_map_reduce(void);
+bool multiple_calls(void);
+void free_output(struct mr_output *);
diff --git a/src/main.c b/src/main.c
index 8a7d293..919af9a 100644
--- a/src/main.c
+++ b/src/main.c
@@ -1,9 +1,9 @@
 #include "tests.h"
 
 int main(int argc, char *argv[]) {
-  single_map();
-  single_reduce();
-  single_map_reduce();
-
+  if (single_map() && single_reduce() && single_map_reduce() &&
+      number_of_mappers() && number_of_reducers() && partition_input() &&
+      partition_intermediate() && full_map_reduce())
+    TEST(true, 5);
   return 0;
 }
diff --git a/src/single_map.c b/src/single_map.c
index 5ba243c..19097b7 100644
--- a/src/single_map.c
+++ b/src/single_map.c
@@ -3,9 +3,9 @@
 #include <stdio.h>
 #include <string.h>
 
-struct mr_in_kv sm_in_kvs[MAX_DATA_SIZE];
+struct mr_in_kv sm_in_kv_lst[MAX_DATA_SIZE];
 
-struct mr_in_kv sm_kvs_store[MAX_DATA_SIZE];
+struct mr_in_kv sm_kv_store[MAX_DATA_SIZE];
 size_t sm_call_count = 0;
 
 void sm_map(const struct mr_in_kv *in_kv) {
@@ -15,16 +15,16 @@ void sm_map(const struct mr_in_kv *in_kv) {
     return;
   }
 
-  strncpy(sm_kvs_store[index].key, in_kv->key, MAX_KEY_SIZE);
-  strncpy(sm_kvs_store[index].value, in_kv->value, MAX_VALUE_SIZE);
+  strncpy(sm_kv_store[index].key, in_kv->key, MAX_KEY_SIZE);
+  strncpy(sm_kv_store[index].value, in_kv->value, MAX_VALUE_SIZE);
 }
 
 void sm_reduce(const struct mr_out_kv *inter_kv) {}
 
 int sm_cmp() {
-  for (int i = 0; i < MAX_DATA_SIZE; i++) {
-    if (strncmp(sm_kvs_store[i].key, sm_in_kvs[i].key, MAX_KEY_SIZE) != 0 ||
-        strncmp(sm_kvs_store[i].value, sm_in_kvs[i].value, MAX_VALUE_SIZE) !=
+  for (size_t i = 0; i < MAX_DATA_SIZE; i++) {
+    if (strncmp(sm_kv_store[i].key, sm_in_kv_lst[i].key, MAX_KEY_SIZE) != 0 ||
+        strncmp(sm_kv_store[i].value, sm_in_kv_lst[i].value, MAX_VALUE_SIZE) !=
             0) {
       return -1;
     }
@@ -32,18 +32,19 @@ int sm_cmp() {
   return 0;
 }
 
-void single_map() {
+bool single_map() {
   sm_call_count = 0;
-  for (int i = 0; i < MAX_DATA_SIZE; i++) {
-    snprintf(sm_in_kvs[i].key, MAX_KEY_SIZE, "%d", i);
-    snprintf(sm_in_kvs[i].value, MAX_VALUE_SIZE, "%d", i);
+  for (size_t i = 0; i < MAX_DATA_SIZE; i++) {
+    snprintf(sm_in_kv_lst[i].key, MAX_KEY_SIZE, "%zu", i);
+    snprintf(sm_in_kv_lst[i].value, MAX_VALUE_SIZE, "%zu", i);
   }
 
-  struct mr_input sm_input = {sm_in_kvs, MAX_DATA_SIZE};
+  struct mr_input sm_input = {sm_in_kv_lst, MAX_DATA_SIZE};
   struct mr_output sm_output;
 
-  TEST(mr_exec(&sm_input, sm_map, 1, sm_reduce, 1, &sm_output) == 0 &&
-           sm_call_count == MAX_DATA_SIZE && sm_cmp() == 0,
-       10);
-  sm_call_count = 0;
+  bool res = mr_exec(&sm_input, sm_map, 1, sm_reduce, 1, &sm_output) == 0 &&
+             sm_call_count == MAX_DATA_SIZE && sm_cmp() == 0;
+  free_output(&sm_output);
+  TEST(res, 10);
+  return res;
 }
diff --git a/src/single_map_reduce.c b/src/single_map_reduce.c
deleted file mode 100644
index fb52822..0000000
--- a/src/single_map_reduce.c
+++ /dev/null
@@ -1,40 +0,0 @@
-#include "single_map_reduce.h"
-#include <stdio.h>
-#include <string.h>
-
-void smr_map(const struct mr_in_kv *in_kv) { mr_emit_i(in_kv->value, "1"); }
-
-void smr_reduce(const struct mr_out_kv *inter_kv) {
-  int cnt = 0;
-
-  for (int i = 0; i < inter_kv->count; i++) {
-    strcmp(inter_kv->value[i], "1") == 0 ? cnt++ : 0;
-  }
-
-  char cnt_str[MAX_VALUE_SIZE];
-  snprintf(cnt_str, MAX_VALUE_SIZE, "%d", cnt);
-  mr_emit_f(inter_kv->key, cnt_str);
-}
-
-int smr_cmp(struct mr_output *output) {
-  for (int i = 0; i < output->count; i++) {
-    if (strcmp(output->out_kvs[i].key, ex_out_kvs[i].key) != 0) {
-      return -1;
-    }
-
-    if (strcmp(output->out_kvs[i].value[0], ex_out_kvs[i].value) != 0) {
-      return -1;
-    }
-  }
-
-  return 0;
-}
-
-void single_map_reduce() {
-  struct mr_input smr_input = {ex_in_kvs, MAX_DATA_SIZE};
-  struct mr_output smr_output;
-
-  TEST(mr_exec(&smr_input, smr_map, 1, smr_reduce, 1, &smr_output) == 0 &&
-           smr_output.count == 57 && smr_cmp(&smr_output) == 0,
-       15);
-}
diff --git a/src/single_reduce.c b/src/single_reduce.c
index 89603b9..71a02a5 100644
--- a/src/single_reduce.c
+++ b/src/single_reduce.c
@@ -5,14 +5,14 @@
 
 #define MOD 8
 
-struct mr_in_kv sr_in_kvs[MAX_DATA_SIZE];
+struct mr_in_kv sr_in_kv_lst[MAX_DATA_SIZE];
 
 size_t sr_call_count = 0;
 struct sr_inter_kv {
   char key[MAX_KEY_SIZE];
   char value[MAX_DATA_SIZE / MOD][MAX_VALUE_SIZE];
 };
-struct sr_inter_kv sr_kvs_store[MOD];
+struct sr_inter_kv sr_kv_store[MOD];
 
 void sr_map(const struct mr_in_kv *in_kv) {
   mr_emit_i(in_kv->key, in_kv->value);
@@ -25,20 +25,20 @@ void sr_reduce(const struct mr_out_kv *inter_kv) {
     return;
   }
 
-  strncpy(sr_kvs_store[index].key, inter_kv->key, MAX_KEY_SIZE);
-  for (int j = 0; j < inter_kv->count; j++) {
-    strncpy(sr_kvs_store[index].value[j], inter_kv->value[j], MAX_VALUE_SIZE);
+  strncpy(sr_kv_store[index].key, inter_kv->key, MAX_KEY_SIZE);
+  for (size_t i = 0; i < inter_kv->count; i++) {
+    strncpy(sr_kv_store[index].value[i], inter_kv->value[i], MAX_VALUE_SIZE);
   }
 }
 
 int sr_cmp() {
-  for (int i = 0; i < MAX_DATA_SIZE; i++) {
-    if (strncmp(sr_kvs_store[i % MOD].key, sr_in_kvs[i].key, MAX_KEY_SIZE) !=
+  for (size_t i = 0; i < MAX_DATA_SIZE; i++) {
+    if (strncmp(sr_kv_store[i % MOD].key, sr_in_kv_lst[i].key, MAX_KEY_SIZE) !=
         0) {
       return -1;
     }
 
-    if (strncmp(sr_kvs_store[i % MOD].value[i / MOD], sr_in_kvs[i].value,
+    if (strncmp(sr_kv_store[i % MOD].value[i / MOD], sr_in_kv_lst[i].value,
                 MAX_VALUE_SIZE) != 0) {
       return -1;
     }
@@ -46,19 +46,21 @@ int sr_cmp() {
   return 0;
 }
 
-void single_reduce() {
+bool single_reduce() {
   sr_call_count = 0;
 
-  for (int i = 0; i < MAX_DATA_SIZE; i++) {
-    snprintf(sr_in_kvs[i].key, MAX_KEY_SIZE, "%d", i % MOD);
-    snprintf(sr_in_kvs[i].value, MAX_VALUE_SIZE, "%d", i);
+  for (size_t i = 0; i < MAX_DATA_SIZE; i++) {
+    snprintf(sr_in_kv_lst[i].key, MAX_KEY_SIZE, "%zu", i % MOD);
+    snprintf(sr_in_kv_lst[i].value, MAX_VALUE_SIZE, "%zu", i);
   }
 
-  struct mr_input sr_input = {sr_in_kvs, MAX_DATA_SIZE};
+  struct mr_input sr_input = {sr_in_kv_lst, MAX_DATA_SIZE};
   struct mr_output sr_output;
 
-  TEST(mr_exec(&sr_input, sr_map, 1, sr_reduce, 1, &sr_output) == 0 &&
-           sr_call_count == MOD && sr_cmp() == 0,
-       10);
-  sr_call_count = 0;
+  bool res = mr_exec(&sr_input, sr_map, 1, sr_reduce, 1, &sr_output) == 0 &&
+             sr_call_count == MOD && sr_cmp() == 0;
+  free_output(&sr_output);
+  TEST(res, 10);
+
+  return res;
 }
diff --git a/src/test.c b/src/test.c
index b694523..1af5425 100644
--- a/src/test.c
+++ b/src/test.c
@@ -4,24 +4,24 @@
 #include <string.h>
 #include <unistd.h>
 
-static int SUCCESS_CASES = 0;
-static int TOTAL_CASES = 0;
-static int TOTAL_SCORE = 0;
+static size_t SUCCESS_CASES = 0;
+static size_t TOTAL_CASES = 0;
+static size_t TOTAL_SCORE = 0;
 
 void print_test_result() {
   char buf[48];
-  snprintf(buf, 48, "Score: %d, Success cases: %d/%d\n", TOTAL_SCORE,
+  snprintf(buf, 48, "Score: %zu, Success cases: %zu/%zu\n", TOTAL_SCORE,
            SUCCESS_CASES, TOTAL_CASES);
   write(STDOUT_FILENO, buf, strlen(buf));
 }
 
-void test(char *file, int line, bool f, int pts) {
+void test(char *file, size_t line, bool f, size_t pts) {
   if (f) {
     SUCCESS_CASES += 1;
     TOTAL_SCORE += pts;
   } else {
     char buf[128];
-    snprintf(buf, 128, "Test failed at line %d in %s\n", line, file);
+    snprintf(buf, 128, "Test failed at line %zu in %s\n", line, file);
     write(STDOUT_FILENO, buf, strlen(buf));
   }
   TOTAL_CASES += 1;
